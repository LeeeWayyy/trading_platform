name: CI - Tests & Coverage

# Run tests and check coverage on all PRs and pushes to master
# Ensures code quality and test completeness before merge

on:
  pull_request:
    branches: [master, main]
  push:
    branches: [master, main]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test-and-coverage:
    name: Run tests and check coverage
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: trading_platform
          POSTGRES_PASSWORD: dev_password
          POSTGRES_DB: trading_platform_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --with dev

      - name: Run mypy type checking
        run: |
          echo "::group::Running mypy type checks"
          mypy libs/ apps/ --strict
          echo "::endgroup::"

      - name: Run ruff linter
        run: |
          echo "::group::Running ruff linter"
          ruff check libs/ apps/
          echo "::endgroup::"

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://trading_platform:dev_password@localhost:5432/trading_platform_test
        run: |
          echo "::group::Running database migrations"
          # Install psql client for running migrations
          sudo apt-get update && sudo apt-get install -y postgresql-client

          # Run migrations in order
          for migration in migrations/*.sql; do
            echo "Running migration: $migration"
            PGPASSWORD=dev_password psql -h localhost -U trading_platform -d trading_platform_test -f "$migration"
          done
          echo "::endgroup::"

      - name: Run tests with coverage
        env:
          REDIS_URL: redis://localhost:6379/0
          DATABASE_URL: postgresql://trading_platform:dev_password@localhost:5432/trading_platform_test
        run: |
          # Skip integration and e2e tests that require external services
          # Integration tests: marked with @pytest.mark.integration (require model_registry data)
          # E2E tests: marked with @pytest.mark.e2e (require running services)
          # Run them locally with: pytest -m integration  or  pytest -m e2e
          pytest -m "not integration and not e2e" --cov=libs --cov=apps --cov-report=xml --cov-report=term-missing --cov-report=html

      - name: Check coverage threshold
        run: |
          coverage report --fail-under=80

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 90
          MINIMUM_ORANGE: 80

      - name: Archive coverage HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 14

      - name: Test summary
        if: success()
        run: |
          echo "## Test Results ðŸ§ª" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Type checking (mypy): Passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Linting (ruff): Passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Tests: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Coverage: $(coverage report --precision=2 | tail -1 | awk '{print $NF}')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed coverage report in artifacts." >> $GITHUB_STEP_SUMMARY

  integration-tests:
    name: Run integration tests
    runs-on: ubuntu-latest
    needs: test-and-coverage  # Run after unit tests pass

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          echo "::group::Building Docker images for integration tests"
          docker compose -f docker-compose.ci.yml build --parallel
          echo "::endgroup::"

      - name: Start services
        run: |
          echo "::group::Starting services with docker compose"
          docker compose -f docker-compose.ci.yml up -d
          echo "::endgroup::"

      - name: Wait for services to be healthy
        uses: ./.github/actions/wait-for-services
        with:
          compose-file: docker-compose.ci.yml
          max-iterations: 30
          sleep-seconds: 4
          fail-on-timeout: true

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --with dev

      - name: Run E2E integration tests
        run: |
          echo "::group::Running E2E integration tests"
          pytest tests/e2e/ -v -m e2e --tb=short
          echo "::endgroup::"

      - name: Capture service logs on failure
        if: failure()
        run: |
          echo "::group::Service logs (signal_service)"
          docker compose -f docker-compose.ci.yml logs signal_service
          echo "::endgroup::"

          echo "::group::Service logs (execution_gateway)"
          docker compose -f docker-compose.ci.yml logs execution_gateway
          echo "::endgroup::"

          echo "::group::Service logs (orchestrator)"
          docker compose -f docker-compose.ci.yml logs orchestrator
          echo "::endgroup::"

      - name: Stop services
        if: always()
        run: |
          echo "::group::Stopping services"
          docker compose -f docker-compose.ci.yml down -v
          echo "::endgroup::"

      - name: Integration test summary
        if: success()
        run: |
          echo "## Integration Tests ðŸ”—" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Service health checks: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Signal generation: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Service communication: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Orchestrator workflow: Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All services started successfully and E2E tests passed." >> $GITHUB_STEP_SUMMARY
